#!/usr/bin/python
#
# @Copyright@
#
# 				Rocks(r)
# 		         www.rocksclusters.org
# 		         version 5.6 (Emerald Boa)
# 		         version 6.1 (Emerald Boa)
#
# Copyright (c) 2000 - 2013 The Regents of the University of California.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
# 1. Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright
# notice unmodified and in its entirety, this list of conditions and the
# following disclaimer in the documentation and/or other materials provided
# with the distribution.
#
# 3. All advertising and press materials, printed or electronic, mentioning
# features or use of this software must display the following acknowledgement:
#
# 	"This product includes software developed by the Rocks(r)
# 	Cluster Group at the San Diego Supercomputer Center at the
# 	University of California, San Diego and its contributors."
#
# 4. Except as permitted for the purposes of acknowledgment in paragraph 3,
# neither the name or logo of this software nor the names of its
# authors may be used to endorse or promote products derived from this
# software without specific prior written permission.  The name of the
# software includes the following terms, and any derivatives thereof:
# "Rocks", "Rocks Clusters", and "Avalanche Installer".  For licensing of
# the associated name, interested parties should contact Technology
# Transfer & Intellectual Property Services, University of California,
# San Diego, 9500 Gilman Drive, Mail Code 0910, La Jolla, CA 92093-0910,
# Ph: (858) 534-5815, FAX: (858) 534-7345, E-MAIL:invent@ucsd.edu
#
# THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS''
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
# THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS
# BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
# IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# @Copyright@
#
from rabbit_client.RabbitMQClient import RabbitMQPublisher, RabbitMQConsumer, SyncRabbitMQPublisher
import logging

from threading import Thread

import time
import json

import sqlite3
import sys

import pika

NODE_NAME = 'zfs-0-0' # this node's name
RABBITMQ_URL = 'amqp://guest:guest@localhost:5672/%2F?connection_attempts=3&heartbeat_interval=3600'

with sqlite3.connect('calls.db') as con:
    cur = con.cursor()
    cur.execute('CREATE TABLE IF NOT EXISTS zvol_calls(zvol TEXT PRIMARY KEY NOT NULL, corr_id TEXT NOT NULL, reply_to TEXT NOT NULL, time INT NOT NULL)')

"""
Received set_zvol command from frontend, passing to compute node
"""
def set_zvol(node_name, zvol_name, props):
    print "Setting zvol %s"%zvol_name

    with sqlite3.connect('calls.db') as con:
        cur = con.cursor()
        try :
            cur.execute('INSERT INTO zvol_calls VALUES ("%s","%s","%s",%i)'%(zvol_name, props.correlation_id, props.reply_to, time.time()))
            con.commit()
            vmPublisher.messages.put({'message': {'action': 'set_zvol', 'target':zvol_name, 'node_name': NODE_NAME}, 'routing_key': node_name})
            print "Setting zvol %s sent"%zvol_name
        except sqlite3.IntegrityError, msg:
            print "%s"%msg
            SyncRabbitMQPublisher(RABBITMQ_URL).publish(routing_key=props.reply_to,
                        body = {'action': 'zvol_attached', 'target':zvol_name, 'node_name': NODE_NAME, 'status': 'error', 'error':'zvol_busy'},
                        correlation_id = props.correlation_id)


"""
Received zvol tear_down command from frontend, passing to compute node
"""
def tear_down(node_name, zvol_name, props):
    print "Tearing down zvol %s"%zvol_name
    with sqlite3.connect('calls.db') as con:
        cur = con.cursor()
        try :
            cur.execute('INSERT INTO zvol_calls VALUES ("%s","%s","%s",%i)'%(zvol_name, props.correlation_id, props.reply_to, time.time()))
            con.commit()
            vmPublisher.messages.put({'message': {'action': 'tear_down', 'target':zvol_name, 'node_name': NODE_NAME}, 'routing_key': node_name})
            print "Tearing down zvol %s sent"%zvol_name
        except sqlite3.IntegrityError, msg:
            print "%s"%msg
            SyncRabbitMQPublisher(RABBITMQ_URL).publish(routing_key=props.reply_to,
                        body = {'action': 'zvol_detached', 'target':zvol_name, 'node_name': NODE_NAME, 'status': 'error', 'error':'zvol_busy'},
                        correlation_id = props.correlation_id)


"""
Received zvol_attached notification from compute node, passing to frontend
"""
def zvol_attached(node_name, zvol_name, props):
    print "Zvol attached %s at %s"%(zvol_name,node_name)
    with sqlite3.connect('calls.db') as con:
        cur = con.cursor()
        cur.execute('SELECT corr_id, reply_to FROM zvol_calls WHERE zvol = "%s"'%zvol_name)
        row = cur.fetchone()
        if row != None:
            SyncRabbitMQPublisher(RABBITMQ_URL).publish(routing_key=row[1],
                        body = {'action': 'zvol_attached', 'target':zvol_name, 'node_name': NODE_NAME, 'status':'success'},
                        correlation_id = row[0])
            cur.execute('DELETE FROM zvol_calls WHERE zvol = "%s"'%zvol_name)
            con.commit()

"""
Received zvol_detached notification from compute node, passing to frontend
"""
def zvol_detached(node_name, zvol_name, props):
    print "Zvol detached %s at %s"%(zvol_name,node_name)
    with sqlite3.connect('calls.db') as con:
        cur = con.cursor()
        cur.execute('SELECT corr_id, reply_to FROM zvol_calls WHERE zvol = "%s"'%zvol_name)
        row = cur.fetchone()
        if row != None:
            SyncRabbitMQPublisher(RABBITMQ_URL).publish(routing_key=row[1],
                        body = {'action': 'zvol_detached', 'target':zvol_name, 'node_name': NODE_NAME, 'status':'success'},
                        correlation_id = row[0])
            cur.execute('DELETE FROM zvol_calls WHERE zvol = "%s"'%zvol_name)
            con.commit()

function_dict = {'set_zvol':set_zvol, 'tear_down':tear_down, 'zvol_attached':zvol_attached, 'zvol_detached': zvol_detached }

def process_message(properties, message):
    print "Received message %s"%message
    function_dict[message['action']](message['node_name'],message['target'], properties)




LOG_FORMAT = ('%(levelname) -10s %(asctime)s %(name) -30s %(funcName) '
              '-35s %(lineno) -5d: %(message)s')
LOGGER = logging.getLogger(__name__)

logging.basicConfig(filename='log',level=logging.INFO, format=LOG_FORMAT)

# Connect to localhost:5672 as guest with the password guest and virtual host "/" (%2F)
vmPublisher = RabbitMQPublisher(RABBITMQ_URL, 'rocks.vm-manage', 'direct')
vmConsumer = RabbitMQConsumer(RABBITMQ_URL, 'rocks.vm-manage', 'direct', NODE_NAME, process_message)

t_publish = Thread(target=vmPublisher.run)
t_publish.start()
print 'started publisher'

t_consume = Thread(target=vmConsumer.run)
t_consume.start()
print 'started consumer'


raw_input('Enter to quit\n')
vmPublisher.stop()
vmConsumer.stop()
t_publish.join()
t_consume.join()
