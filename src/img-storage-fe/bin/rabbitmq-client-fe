#!/usr/bin/python
#
# @Copyright@
#
# 				Rocks(r)
# 		         www.rocksclusters.org
# 		         version 5.6 (Emerald Boa)
# 		         version 6.1 (Emerald Boa)
#
# Copyright (c) 2000 - 2013 The Regents of the University of California.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
# 1. Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright
# notice unmodified and in its entirety, this list of conditions and the
# following disclaimer in the documentation and/or other materials provided
# with the distribution.
#
# 3. All advertising and press materials, printed or electronic, mentioning
# features or use of this software must display the following acknowledgement:
#
# 	"This product includes software developed by the Rocks(r)
# 	Cluster Group at the San Diego Supercomputer Center at the
# 	University of California, San Diego and its contributors."
#
# 4. Except as permitted for the purposes of acknowledgment in paragraph 3,
# neither the name or logo of this software nor the names of its
# authors may be used to endorse or promote products derived from this
# software without specific prior written permission.  The name of the
# software includes the following terms, and any derivatives thereof:
# "Rocks", "Rocks Clusters", and "Avalanche Installer".  For licensing of
# the associated name, interested parties should contact Technology
# Transfer & Intellectual Property Services, University of California,
# San Diego, 9500 Gilman Drive, Mail Code 0910, La Jolla, CA 92093-0910,
# Ph: (858) 534-5815, FAX: (858) 534-7345, E-MAIL:invent@ucsd.edu
#
# THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS''
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
# THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS
# BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
# IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# @Copyright@
#
import pika

import logging
import sys
import uuid

import json

NODE_NAME = 'campfire' # this node's name

RABBITMQ_SERVER = 'localhost'

try:
    import rocks.db.helper

    db = rocks.db.helper.DatabaseHelper()
    db.connect()
    RABBITMQ_SERVER = db.getHostAttr(db.getHostname('localhost'), 'Kickstart_PrivateHostname')
    db.close()
except ImportError:
    pass

RABBITMQ_URL = 'amqp://guest:guest@%s:5672/%%2F?connection_attempts=3&heartbeat_interval=3600'%RABBITMQ_SERVER

# Open a connection to RabbitMQ on localhost using all default parameters
connection = pika.BlockingConnection(pika.URLParameters(RABBITMQ_URL))

# Open the channel
channel = connection.channel()

zvol_name = 'test_zvol'

action = 'set_zvol'

if len(sys.argv) > 1:
    zvol_name = sys.argv[1]

if len(sys.argv) > 2:
    action = sys.argv[2]

# Declare the queue
method_frame = channel.queue_declare(exclusive=True, auto_delete=True)
zvol_manage_queue = method_frame.method.queue

# Turn on delivery confirmations
channel.confirm_delivery()

message = {'action': action, 'target':zvol_name, 'node_name':'compute-0-0'}

def on_message(channel, method_frame, header_frame, body):
    print method_frame.delivery_tag
    print body
    print
    channel.basic_ack(delivery_tag=method_frame.delivery_tag)
    channel.stop_consuming()
    connection.close()


# Send a message
if channel.basic_publish(exchange='rocks.vm-manage',
                         routing_key='zfs-0-0',
                         mandatory=True,
                         body=json.dumps(message, ensure_ascii=False),
                         properties=pika.BasicProperties(content_type='application/json',
                                                         delivery_mode=1,
                                                         correlation_id = str(uuid.uuid4()),
                                                         reply_to = zvol_manage_queue
                                                        )
                        ):
    print 'Message publish was confirmed'

    channel.basic_consume(on_message, zvol_manage_queue)
    channel.start_consuming()
else:
    print 'Message could not be confirmed'
